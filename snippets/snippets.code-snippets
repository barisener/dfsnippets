{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  //TEMPLATES
  "Default Component": {
    "prefix": "vdefault",
    "body": [
      "<template>",
      "  <div>Component</div>",
      "</template>",
      "",
      "<script setup>",
      "import { ref, watch, computed } from 'vue';",
      "import { useI18n } from 'vue-i18n'",
      "//#region Composables",
      "const { t } = useI18n()",
      "//#endregion",
      "",
      "//#region Injects",
      "//#endregion",
      "",
      "//#region Props",
      "//#endregion",
      "",
      "//#region Emits",
      "//#endregion",
      "",
      "//#region Variables",
      "//#endregion",
      "",
      "//#region Methods",
      "//#endregion",
      "",
      "//#region Computed Properties",
      "//#endregion",
      "",
      "//#region Watchers",
      "//#endregion",
      "",
      "//#region Lifecycle Hooks",
      "//#endregion",
      "",
      "//#region Created",
      "//#endregion",
      "",
      "//#region Providers",
      "//#endregion",
      "",
      "</script>",
      "",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "Default Vue 3 Component"
  },

  //PROVIDE INJECT
  "Inject": {
    "prefix": "vinject",
    "body": ["const ${1:message} = inject(${1:'message'})"],
    "description": "Inject"
  },
  "Provide": {
    "prefix": "vprovide",
    "body": ["provide('${1:'provideName'}', ${1:provide});"],
    "description": "Provide"
  },
  //PROPS
  "Define props": {
    "prefix": "vprops",
    "body": [
      "const props = defineProps({",
      "  ${1:prop1}: {",
      "    type: ${2:Boolean},",
      "    required: ${3:true},",
      "    default: ${4:false},",
      "  },",
      "});"
    ],
    "description": "Define props"
  },
  "Define single prop": {
    "prefix": "vprop",
    "body": [
      "  ${1:prop1}: {",
      "    type: ${2:Boolean},",
      "    required: ${3:true},",
      "    default: ${4:false},",
      "  }"
    ],
    "description": "Define single prop"
  },
  //EMITS
  "Define emits as object": {
    "prefix": "vemit",
    "body": [
      "const emit = defineEmits({",
      "  ${1:submit}(${2:payload}) {",
      "    ${3://Do something}",
      "    // return `true` or `false` to indicate",
      "  }",
      "})"
    ],
    "description": "Define emits as object"
  },
  "Define emits as array": {
    "prefix": "vemits",
    "body": ["const emit = defineEmits([${1:'onFocus'}, ${1:'submit'}])"],
    "description": "Define emits as array"
  },
  //VARIABLES
  "Define ref": {
    "prefix": "vref",
    "body": ["const ${1:name} = ref(${2:initialValue})"],
    "description": "Define ref"
  },
  //METHODS
  "Define method": {
    "prefix": "vmethod",
    "body": [
      "const ${1:methodName} = (${2:params}) => {",
      "    ${3:doSomething}",
      "};"
    ],
    "description": "Define method"
  },
  "Define function": {
    "prefix": "vfunction",
    "body": [
      "const ${1:methodName} = (${2:params}) => {",
      "    ${3:doSomething}",
      "};"
    ],
    "description": "Define method"
  },
  //COMPUTED
  "Define computed": {
    "prefix": "vcomputed",
    "body": [
      "const ${1:now} = computed(() => {",
      "  return ${2:Date.now()}",
      "})"
    ],
    "description": "Define computed"
  },
  "Define writable computed": {
    "prefix": "vwritable-computed",
    "body": [
      "const ${1:fullName} = computed({",
      "  // getter",
      "  get() {",
      "    return ${2:firstName.value + ' ' + lastName.value}",
      "  },",
      "  // setter",
      "  set(newValue) {",
      "    // Note: we are using destructuring assignment syntax here.",
      "   ${3: [firstName.value, lastName.value] = newValue.split(' ')}",
      "  }",
      "})"
    ],
    "description": "Define writable computed"
  },
  //WATCH
  "Define watch": {
    "prefix": "vwatch",
    "body": [
      "watch(",
      "  () => ${1:foo},",
      "  (newValue, oldValue) => {",
      "    ${2:body}  ",
      "  }",
      ");",
      ""
    ],
    "description": "Define watch"
  },
  //MIXIN
  "Import mixin": {
    "prefix": "impmixin",
    "body": ["import useMixin from 'src/composables/useMixins.js'"],
    "description": "Import mixin"
  }
}
