{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  //TEMPLATES
  "Default Component": {
    "prefix": "vdefault",
    "body": [
      "<template>",
      "  <div>Component</div>",
      "</template>",
      "",
      "<script setup>",
      "import { ref, watch, computed } from 'vue';",
      "import { useI18n } from 'vue-i18n'",
      "//#region Composables",
      "const { t } = useI18n()",
      "//#endregion",
      "",
      "//#region Injects",
      "//#endregion",
      "",
      "//#region Props",
      "//#endregion",
      "",
      "//#region Emits",
      "//#endregion",
      "",
      "//#region Variables",
      "//#endregion",
      "",
      "//#region Methods",
      "//#endregion",
      "",
      "//#region Computed Properties",
      "//#endregion",
      "",
      "//#region Watchers",
      "//#endregion",
      "",
      "//#region Lifecycle Hooks",
      "//#endregion",
      "",
      "//#region Created",
      "//#endregion",
      "",
      "//#region Providers",
      "//#endregion",
      "",
      "</script>",
      "",
      "<style lang=\"scss\" scoped></style>",
      ""
    ],
    "description": "Default Vue 3 Component"
  },

  //PROVIDE INJECT
  "Inject": {
    "prefix": "vinject",
    "body": ["const ${1:message} = inject(${1:'message'})"],
    "description": "Inject"
  },
  "Provide": {
    "prefix": "vprovide",
    "body": ["provide('${1:'provideName'}', ${1:provide});"],
    "description": "Provide"
  },
  //PROPS
  "Define props": {
    "prefix": "vprops",
    "body": [
      "const props = defineProps({",
      "  ${1:prop1}: {",
      "    type: ${2:Boolean},",
      "    required: ${3:true},",
      "    default: ${4:false},",
      "  },",
      "});"
    ],
    "description": "Define props"
  },
  "Define single prop": {
    "prefix": "vprop",
    "body": [
      "  ${1:prop1}: {",
      "    type: ${2:Boolean},",
      "    required: ${3:true},",
      "    default: ${4:false},",
      "  }"
    ],
    "description": "Define single prop"
  },
  //EMITS
  "Define emits as object": {
    "prefix": "vemit",
    "body": [
      "const emit = defineEmits({",
      "  ${1:submit}(${2:payload}) {",
      "    ${3://Do something}",
      "    // return `true` or `false` to indicate",
      "  }",
      "})"
    ],
    "description": "Define emits as object"
  },
  "Define emits as array": {
    "prefix": "vemits",
    "body": ["const emit = defineEmits([${1:'onFocus'}, ${1:'submit'}])"],
    "description": "Define emits as array"
  },
  //VARIABLES
  "Define ref": {
    "prefix": "vref",
    "body": ["const ${1:name} = ref(${2:initialValue})"],
    "description": "Define ref"
  },
  //METHODS
  "Define method": {
    "prefix": "vmethod",
    "body": [
      "const ${1:methodName} = (${2:params}) => {",
      "    ${3:doSomething}",
      "};"
    ],
    "description": "Define method"
  },
  "Define function": {
    "prefix": "vfunction",
    "body": [
      "const ${1:methodName} = (${2:params}) => {",
      "    ${3:doSomething}",
      "};"
    ],
    "description": "Define method"
  },
  //COMPUTED
  "Define computed": {
    "prefix": "vcomputed",
    "body": [
      "const ${1:now} = computed(() => {",
      "  return ${2:Date.now()}",
      "})"
    ],
    "description": "Define computed"
  },
  "Define writable computed": {
    "prefix": "vwritable-computed",
    "body": [
      "const ${1:fullName} = computed({",
      "  // getter",
      "  get() {",
      "    return ${2:firstName.value + ' ' + lastName.value}",
      "  },",
      "  // setter",
      "  set(newValue) {",
      "    // Note: we are using destructuring assignment syntax here.",
      "   ${3: [firstName.value, lastName.value] = newValue.split(' ')}",
      "  }",
      "})"
    ],
    "description": "Define writable computed"
  },
  //WATCH
  "Define watch": {
    "prefix": "vwatch",
    "body": [
      "watch(",
      "  () => ${1:foo},",
      "  (newValue, oldValue) => {",
      "    ${2:body}  ",
      "  }",
      ");",
      ""
    ],
    "description": "Define watch"
  },
  //MIXIN
  "Import mixin": {
    "prefix": "impmixin",
    "body": ["import useMixin from 'src/composables/useMixins.js'"],
    "description": "Import mixin"
  },
  //PINIA
  "Create Pinia Instance": {
    "prefix": ["pinia", "cp"],
    "body": [
      "import { createPinia } from 'pinia';",
      "const pinia = createPinia();",
      "${1:app}.use(pinia);"
    ],
    "description": "Create a pinia instance (the root store) and pass it to the app as a plugin.\n"
  },
  "Create Pinia Instance for Vue 2": {
    "prefix": ["pinia4vue2", "cp4vue2"],
    "body": [
      "import { createPinia, PiniaVuePlugin } from 'pinia';",
      "Vue.use(PiniaVuePlugin);",
      "const ${1:pinia} = createPinia();"
    ],
    "description": "using Vue 2, you also need to install a plugin and inject the created pinia at the root of the app\n"
  },
  "Pinia Defining Composing Stores": {
    "prefix": ["defineStore", "ds"],
    "body": [
      "import { defineStore } from 'pinia';",
      "",
      "export const use${1:${TM_FILENAME_BASE/(\\w+)?[-_\\s]+(\\w+)/${1:/capitalize}${2:/capitalize}/g}}Store = defineStore('${2:${TM_FILENAME_BASE/(\\w+)?[-_\\s]+(\\w+)/${1:/downcase}-${2:/downcase}/g}}', () => {",
      "\t$3",
      "\treturn {",
      "\t\t$4",
      "\t}",
      "});",
      ""
    ],
    "description": "`defineStore()` accepts two distinct values for its second argument:\na Setup function or an Options object.\nIn Setup Stores:\n- `ref()`s become `state` properties,\n- `computed()`s become `getters`\n- `function()`s become `actions`\n"
  },
  "Pinia Defining Option Stores": {
    "prefix": ["defineStore", "dso"],
    "body": [
      "import { defineStore } from 'pinia';",
      "",
      "export const use${1:${TM_FILENAME_BASE/(\\w+)?[-_\\s]+(\\w+)/${1:/capitalize}${2:/capitalize}/g}}Store = defineStore('${2:${TM_FILENAME_BASE/(\\w+)?[-_\\s]+(\\w+)/${1:/downcase}-${2:/downcase}/g}}', {",
      "\tstate: () => ({",
      "\t\t${3}",
      "\t}),",
      "\tgetters: {",
      "\t\t${4}",
      "\t},",
      "\tactions: {",
      "\t\t${5}",
      "\t},",
      "});",
      ""
    ],
    "description": "Pass an Options Object with state, actions, and getters properties.\nYou can think of:\n- `state` as the `data` of the store,\n- `getters` as the `computed` properties of the store,\n- `actions` as the `methods` of the store.\n"
  },
  "Import Pinia Store": {
    "prefix": "ims",
    "body": [
      "import { use${1/(.*)/${1:/pascalcase}/}Store } from 'src/store/modules/${1:feature}';",
      "${2:const ${1/(.*)/${1:/camelcase}/}Store = use${1/(.*)/${1:/pascalcase}/}Store();}"
    ],
    "description": "Import a Pinia Store"
  },
  "Import Pinia storeToRefs()": {
    "prefix": "imstr",
    "body": [
      "import { storeToRefs } from 'pinia';",
      "${1:const { properties \\} = storeToRefs(store);}"
    ],
    "description": "Import Pinia storeToRefs"
  },
  "Import Pinia mapState": {
    "prefix": "imms",
    "body": [
      "import { mapState } from 'pinia';",
      "${3:...mapState(use${1:Feature}Store, ['${2:state/getter}']),}"
    ],
    "description": "Usage with the Options API, use the `mapState()` helper to map state properties as readonly `computed` properties,\nyou can also write a function that gets access to the store.\n"
  },
  "Import Pinia mapActions": {
    "prefix": "imma",
    "body": [
      "import { mapActions } from 'pinia';",
      "${3:...mapActions(use${1:Feature}Store, ['${2:actions}']),}"
    ],
    "description": "Usage with the Options API, use the `mapActions()` helper to map actions properties as `methods` in Vue component.\n"
  },
  "Import Pinia mapWritableState": {
    "prefix": "immws",
    "body": [
      "import { mapWritableState } from 'pinia';",
      "${3:...mapWritableState(use${1:Feature}Store, ['${2:state/getter}']),}"
    ],
    "description": "use the `mapWritableState()` helper to map writable state properties as computed properties,\nyou cannot pass a function. (e.g. have a form)\n"
  },
  "Pinia Composition API - With setup()": {
    "prefix": ["store2composition", "us"],
    "body": [
      "${2:const ${1/(.*)/${1:/camelcase}/}Store = use${1/(.*)/${1:/pascalcase}/}Store();}"
    ],
    "description": "directly access any `state/getter` as a property of the store instance"
  },
  "Pinia Options API - With setup()": {
    "prefix": ["store2option", "uso"],
    "body": [
      "setup() {",
      "\tconst ${1:feature}Store = use${1/(.*)/${1:/pascalcase}/}Store()",
      "\treturn { ${1:feature}Store }",
      "},"
    ],
    "description": "The `setup()` hook can make using Pinia easier to work with in the Options API. No extra map helper functions needed.\n"
  },
  "Pinia Options API - Without setup() - mapState()": {
    "prefix": "ms",
    "body": ["...mapState(use${1:Feature}Store, ['${2:state/getter}']),"],
    "description": "Usage with the Options API, use the `mapState()` helper to map `state/getters` properties as readonly `computed` properties,\nyou can also write a function that gets access to the `store`.\n"
  },
  "Pinia Options API - Without setup() - mapActions()": {
    "prefix": "ma",
    "body": ["...mapActions(use${1:Feature}Store, ['${2:actions}']),"],
    "description": "Usage with the Options API, use the `mapActions()` helper to map `actions` properties as `methods` in Vue component.\n"
  },
  "Pinia Options API - Without setup() - mapWritableState()": {
    "prefix": "mws",
    "body": [
      "...mapWritableState(use${1:Feature}Store, ['${2:state/getter}']),"
    ],
    "description": "use the `mapWritableState()` helper to map writable state properties as computed properties,\nyou cannot pass a function. (e.g. have a form)\n"
  },
  "Pinia Mutating the state ($patch)": {
    "prefix": ["store.$patch", "sp"],
    "body": ["${1:feature}Store.\\$patch((state) => {", "\t$2", "});"],
    "description": "Mutating the state.\n"
  },
  "Pinia Subscribing to state ($subscribe)": {
    "prefix": ["store.$subscribe", "ss"],
    "body": [
      "${1:feature}Store.\\$subscribe((mutation, state) => {",
      "\t$2",
      "});"
    ],
    "description": "Pinia Subscribing to the state.\nthis subscription will be kept even after the component is unmounted:\n`featureStore.$subscribe(callback, { detached: true })`\n"
  },
  "Pinia Subscribing to actions ($onAction)": {
    "prefix": ["store.$onAction", "sa"],
    "body": [
      "const unsubscribe = ${1:feature}Store.\\$onAction(",
      "\t({ name, store, args, after, onError }) => {",
      "\t\t$2",
      "\t\tafter((result) => { });",
      "\t\tonError((error) => { });",
      "\t}",
      ");"
    ],
    "description": "By default, action subscriptions are bound to the component where they are added, they will be automatically removed when the component is unmounted.\nIf you also want to keep them after the component is unmounted, pass `true` as the second argument to detach the action subscription from the current component.\n"
  }
}
